digraph finite_state_machine {
    rankdir = LR;
    size = "8,5"
    node [shape = doublecircle]; START;
    node [shape = circle];

    // todo check all states

    START -> EOF [label = "<EOF>"];

    // todo su kw (_IDENT__end)

    START -> KW_BOOL_BREAK [label = "b"];

    KW_BOOL_BREAK -> _KW_BOOL_O_ [label = "o"];
    KW_BOOL_BREAK -> _KW_BREAK_R_ [label = "r"];
    // todo spec ELSE
    KW_BOOL_BREAK -> ERROR [label = "ELSE"];

    _KW_BOOL_O_ -> _KW_BOOL_OO_ [label = "o"];
    // todo spec ELSE
    _KW_BOOL_O_ -> ERROR [label = "ELSE"];

    _KW_BOOL_OO_ -> _KW_BOOL_OO_ [label = "l"];
    // todo spec ELSE
    _KW_BOOL_O_ -> ERROR [label = "ELSE"];


START -> KW_CHAR_CONTINUE [label = "c"];
    START -> KW_ELIF_ELSE [label = "e"];
    START -> KW_FN_FOR_FLOAT [label = "f"];
    START -> KW_IN_IF_INT [label = "i"];
    START -> _KW_FN_OUT_ [label = "o"];
    START -> _KW_RETURN_ [label = "r"];
    START -> KW_STRING_STRUCT [label = "s"];
    START -> _KW_VOID_ [label = "v"];
    START -> _KW_AND_ [label = "A"];
    START -> _KW_FALSE_ [label = "F"];
    START -> _KW_NULL_ [label = "N"];
    START -> _KW_OR_ [label = "O"];
    START -> _KW_TRUE_ [label = "T"];

    START -> _IDENT_ [label = "[_a-zA-Z]"]; // todo spec ELSE
    _IDENT_ -> _IDENT_ [label = "[_a-zA-Z0-9]"];
    _IDENT_ -> STRUCT_MEMBER [label = "\\."];
    _IDENT_ -> IDENT [label = "ELSE"];

    STRUCT_MEMBER -> OP_ACCESS_MEMBER [label = "[_a-zA-Z]"];
    STRUCT_MEMBER -> ERROR [ label = "ELSE" ];

    START -> _LIT_INT_ [ label = "[0-9]"];
    _LIT_INT_ -> _LIT_INT_ [label = "[0-9]"];
    _LIT_INT_ -> _LIT_FLOAT_ [label = "\\."];
    _LIT_INT_ -> ERROR [label = "[_a-zA-Z]" ];
    _LIT_INT_ -> LIT_INT [label = "ELSE" ];

    START -> _LIT_FLOAT_ [label = "\\."];
    _LIT_FLOAT_ -> _LIT_FLOAT_ [label = "[0-9]"];
    _LIT_FLOAT_ -> LIT_FLOAT_E [label = "e"];
    _LIT_FLOAT_ -> LIT_FLOAT [label = "ELSE"];

    LIT_FLOAT_E -> LIT_FLOAT_W_E [label = "[0-9]"];
    LIT_FLOAT_E -> LIT_FLOAT_E_SIGN [label = "[\\+-]"];
    LIT_FLOAT_E -> ERROR [label = "ELSE"];

    LIT_FLOAT_E_SIGN -> LIT_FLOAT_W_E [label = "[0-9]"];
    LIT_FLOAT_E_SIGN -> ERROR [label = "ELSE"];

    LIT_FLOAT_W_E -> LIT_FLOAT_W_E [label = "[0-9]"];
    LIT_FLOAT_W_E -> LIT_FLOAT [label = "ELSE"];

    START -> _LIT_CHAR_ [label = "'"];
    _LIT_CHAR_ -> LIT_CHAR [label = "'"];
    _LIT_CHAR_ -> LIT_CHAR_ESCAPE [label = "\\\\"];
    _LIT_CHAR_ -> ERROR [label = "[\\n\\r\\t<EOF>]"];
    _LIT_CHAR_ -> LIT_CHAR_ADDED [ label = "ELSE"];

    LIT_CHAR_ESCAPE -> LIT_CHAR_ADDED [label = "['\\\\nrt]"];
    LIT_CHAR_ESCAPE -> ERROR [label = "ELSE"];

    LIT_CHAR_ADDED -> LIT_CHAR [label = "'"];
    LIT_CHAR_ADDED -> ERROR [label = "ELSE"];

    START -> _LIT_STR_ [label = "\"" ];
    _LIT_STR_ -> LIT_STR [ label = "\""];
    _LIT_STR_ -> LIT_STR_ESCAPE [label = "\\\\"];
    _LIT_STR_ -> ERROR [label = "<EOF>"];
    _LIT_STR_ -> _LIT_STR_ [label = "ELSE"];

    LIT_STR_ESCAPE -> _LIT_STR_ [label = "[\"\\\\nrt]"];
    LIT_STR_ESCAPE -> ERROR [label = "ELSE"];

    START -> _OP_G_ [label = ">"];
    _OP_G_ -> OP_GE [label = "="];
    _OP_G_ -> OP_G [label = "ELSE"];

    START -> _OP_L_ [label = "<"];
    _OP_L_ -> OP_LE [label = "="];
    _OP_L_ -> OP_L [label = "ELSE"];

    START -> _OP_ASSIGN_EQ_ [label = "="];
    _OP_ASSIGN_EQ_ -> OP_IS_EQ [label = "="];
    _OP_ASSIGN_EQ_ -> OP_ASSIGN_EQ [label = "ELSE"];

    START -> _OP_NOT_ [label = "!"];
    _OP_NOT_ -> OP_IS_NEQ [label = "="];
    _OP_NOT_ -> OP_NOT [label = "ELSE"];

    START -> _OP_SUM_ [label = "\\+"];
    _OP_SUM_ -> OP_INCR [label = "\\+"];
    _OP_SUM_ -> OP_ASSIGN_SUM [label = "="];
    _OP_SUM_ -> _LIT_INT_ [label = "[0-9]"];
    _OP_SUM_ -> OP_SUM [label = "ELSE"];

    START -> _OP_SUB_ [label = "_"];
    _OP_SUB_ -> OP_DECR [label = "-"];
    _OP_SUB_ -> OP_ASSIGN_SUB [label = "="];
    _OP_SUB_ -> _LIT_INT_ [ label = "[0-9]"];
    _OP_SUB_ -> OP_SUB [ label = "ELSE"];

    START -> _OP_MUL_ [label = "\\*"];
    _OP_MUL_ -> OP_ASSIGN_MUL [label = "="];
    _OP_MUL_ -> OP_MUL [label = "ELSE"];

    START -> _OP_DIV_ [label = "\\/"];
    _OP_DIV_ -> OP_ASSIGN_DIV [label = "="];
    _OP_DIV_ -> OP_DIV [label = "ELSE"];

    START -> _OP_MOD_ [label = "%" ];
    _OP_MOD_ -> OP_ASSIGN_MOD [label = "="];
    _OP_MOD_ -> OP_MOD [label = "ELSE"];

    START -> OP_PAREN_O [label = "\\("];
    START -> OP_PAREN_C [label = "\\)"];
    START -> OP_BRACE_O [label = "{"];
    START -> OP_BRACE_C [label = "}"];
    START -> OP_BRACKET_O [label = "\\["];
    START -> OP_BRACKET_C [label = "\\]"];
    START -> OP_SEMICOLOIN [label = ";"];
    START -> OP_COMMA [label = ","];
    START -> OP_ADDR [label = "&"];

    START -> INCLUDE [label = "@"];
    // todo (include_end) or next file lexing?? (start)
    INCLUDE -> INCLUDE_END [label = "\\n"];
    INCLUDE -> INCLUDE [label = "ELSE"];

    START -> START [label = "[\\n\\r\\t]"];

    // COMMENTS
    START -> COMMENT_START [label = "#"];
    COMMENT_START -> START [label = "\\n"];
    COMMENT_START -> COMMENT_SL_PLUS_2 [label = "#" ];
    COMMENT_START -> COMMENT_SL [label = "ELSE"];

    COMMENT_SL -> START [label = "\\n"];
    COMMENT_SL -> COMMENT_SL [label = "ELSE"];

    COMMENT_SL_PLUS_2 -> START [label = "\\n"];
    COMMENT_SL_PLUS_2 -> COMMENT_ML [label = "#"];
    COMMENT_SL_PLUS_2 -> COMMENT_SL [label = "ELSE"];

    COMMENT_ML -> COMMENT_ML_MINUS_1 [label = "#"];
    COMMENT_ML -> ERROR [label = "<EOF>"];
    COMMENT_ML -> START [label = "ELSE"];

    COMMENT_ML_MINUS_1 -> COMMENT_ML_MINUS_2 [label = "#"];
    COMMENT_ML_MINUS_1 -> ERROR [label = "<EOF>"];
    COMMENT_ML_MINUS_1 -> COMMENT_ML [label = "ELSE"];

    COMMENT_ML_MINUS_2 -> START [label = "#"];
    COMMENT_ML_MINUS_2 -> ERROR [label = "<EOF>"];
    COMMENT_ML_MINUS_2 -> COMMENT_ML [label = "ELSE"];

    START -> ERROR [ label = "ELSE" ];
}
