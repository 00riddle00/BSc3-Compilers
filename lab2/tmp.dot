digraph finite_state_machine {
	rankdir=LR;
	size="8,5"
	node [shape = doublecircle]; START;
	node [shape = circle];

	START -> IDENT [ label = "[_a-zA-Z]" ];
	IDENT -> IDENT [ label = "[_a-zA-Z0-9]" ];
	IDENT -> STRUCT_MEMBER [ label = "\." ];
	IDENT -> IDENT$ [ label = "$else" ];

	START -> LIT_INT [ label = "[0-9]" ];
	LIT_INT -> LIT_INT [ label = "[0-9]" ];
	LIT_INT -> LIT_FLOAT [ label = "\." ];
	LIT_INT -> ERROR [ label = "[_a-zA-Z]" ];
	LIT_INT -> LIT_INT$ [ label = "$else" ];

	START -> LIT_FLOAT [ label = "\." ];
	LIT_FLOAT -> LIT_FLOAT [ label = "[0-9]" ];
	LIT_FLOAT -> LIT_FLOAT_E [ label = "e" ];
	LIT_FLOAT -> LIT_FLOAT$ [ label = "$else" ];

	START -> LIT_CHAR [ label = "'" ];
	LIT_CHAR -> LIT_CHAR$ [ label = "'" ];
	LIT_CHAR -> LIT_CHAR_ESCAPE [ label = "\\" ];
	LIT_CHAR -> ERROR [ label = "[\n\r\t]" ];
	LIT_CHAR -> LIT_CHAR_ADDED [ label = "$else" ];

	START -> LIT_STR [ label = """ ];
	LIT_STR -> LIT_STR$ [ label = "\"" ];
	LIT_STR -> LIT_STR_ESCAPE [ label = "\\" ];
	LIT_STR -> LIT_STR_ESCAPE [ label = "\\n" ];
	LIT_STR -> LIT_STR [ label = "$else" ];

	START -> COMMENT_START [ label = "#" ];
	COMMENT_START -> COMMENT_START$ [ label = "\\n" ];
	COMMENT_START -> COMMENT_SL_PLUS_2 [ label = "#" ];
	COMMENT_START -> COMMENT_SL [ label = "$else" ];

	START -> OP_L [ label = "<" ];
	OP_L -> OP_LE$ [ label = "=" ];
	OP_L -> OP_L$ [ label = "$else" ];

	START -> OP_G [ label = ">" ];
	OP_G -> OP_GE$ [ label = "=" ];
	OP_G -> OP_G$ [ label = "$else" ];

	START -> OP_SUM [ label = "+" ];
	OP_SUM -> OP_INCR$ [ label = "+" ];
	OP_SUM -> OP_ASSIGN_SUM$ [ label = "=" ];
	OP_SUM -> LIT_INT [ label = "[0-9]" ];
	OP_SUM -> OP_SUM$ [ label = "$else" ];

	START -> OP_SUB [ label = "_" ];
	OP_SUB -> OP_DECR$ [ label = "-" ];
	OP_SUB -> OP_ASSIGN_SUB$ [ label = "=" ];
	OP_SUB -> LIT_INT [ label = "[0-9]" ];
	OP_SUB -> OP_SUB$ [ label = "$else" ];

	START -> OP_MUL [ label = "*" ];
	START -> OP_DIV [ label = "/" ];
	START -> OP_MOD [ label = "%" ];
	START -> OP_ASSIGN_EQ [ label = "=" ];
	START -> OP_NOT [ label = "!" ];

	START -> INCLUDE [ label = "@" ];
	INCLUDE -> INCLUDE$ [ label = "\\n" ];
	INCLUDE -> INCLUDE [ label = "$else" ];

	START -> START [ label = "[\n\r\t ]"];

	START -> START [ label = "\("];




        elif self.curr_char == '(':
            self.begin_token('START')
            self.complete_token('OP_PAREN_O')
        elif self.curr_char == ')':
            self.begin_token('OP_PAREN_C')
        elif self.curr_char == '{':
            self.begin_token('START')
            self.complete_token('OP_BRACE_O')
        elif self.curr_char == '}':
            self.begin_token('START')
            self.complete_token('OP_BRACE_C')
        elif self.curr_char == '[':
            self.begin_token('START')
            self.complete_token('OP_BRACKET_O')
        elif self.curr_char == ']':
            self.begin_token('OP_BRACKET_C')
        elif self.curr_char == ';':
            self.begin_token('START')
            self.complete_token('OP_SEMICOLON')
        elif self.curr_char == ',':
            self.begin_token('START')
            self.complete_token('OP_COMMA')
        elif self.curr_char == '&':
            self.begin_token('START')
            self.complete_token('OP_ADDR')










	START -> ERROR [ label = "$else" ];

	

} 