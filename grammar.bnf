<PROGRAM> ::= <ROOT_ELEMS>

<ROOT_ELEMS> ::= <ROOT_ELEM> | <ROOT_ELEMS> <ROOT_ELEM>
<ROOT_ELEM> ::= <FN_DECL> | <STRUCT_DECL> ";" | <VAR_DECL_STMT> ";" | <VAR_DECL_AND_INIT_STMT> ";"

/* statement block */
<STMT_BLOCK> ::= "{" "}" | "{" <STMTS> "}"

/* statements */
<STMTS> ::= <STMT> | <STMTS> <STMT> 

/* statement */
<STMT> ::= <STATEMENT_W_DELIM> ";" | <STATEMENT_WO_DELIM> 

/* statement types by delimiter */
<STATEMENT_W_DELIM> ::= <IN_IO_STMT> | <OUT_IO_STMT> | <VAR_DECL_STMT> | <VAR_DECL_AND_INIT_STMT> | <ASSIGNMENT_STMT> | <EXPR_STMT> | <BREAK_STMT> | <CONTINUE_STMT> | <RETURN_STMT>
<STATEMENT_WO_DELIM> ::= <IF_STMT> | <WHILE_STMT> | <FOR_STMT>

/* statement parts */
<IN_IO_STMT> ::= "in" "(" <EXPR_SEQ> ")"
<OUT_IO_STMT> ::= "disp" "(" <EXPR_SEQ> ")"
<VAR_DECL_STMT> ::= <VAR_DECL>
<VAR_DECL_AND_INIT_STMT> ::= <VAR_DECL_AND_INIT>
<ASSIGNMENT_STMT> ::= <ASSIGNMENT>
<EXPR_STMT> ::= <EXPR>
<IF_STMT> ::= <IF_IF> | <IF_IF> <IF_ELSE> | <IF_IF> <IF_ELIFS> | <IF_IF> <IF_ELIFS> <IF_ELSE>
<WHILE_STMT> ::= "while" "(" <EXPR> ")" <STMT_BLOCK>
<FOR_STMT> ::= "for" "(" <FOR_INIT> ";" <FOR_CONDITION> ";" <FOR_INCREMENT> ")" <STMT_BLOCK>
<BREAK_STMT> ::= "break" 
<CONTINUE_STMT> ::= "continue" 
<RETURN_STMT> ::= "return" | "return" <EXPR>

/* if-statement parts */
<IF_IF> ::= "if" "(" <EXPR> ")" <STMT_BLOCK>
<IF_ELIFS> ::= <IF_ELIF> | <IF_ELIFS> <IF_ELIF> 
<IF_ELIF> ::= "elif" "(" <EXPR> ")" <STMT_BLOCK>
<IF_ELSE> ::= "else" <STMT_BLOCK> 

/* for-statement parts */
<FOR_INIT> ::= <VAR_DECL> | <VAR_DECL_AND_INIT> | <ASSIGNMENT> | <EXPR> | ""
<FOR_CONDITION> ::= <ASSIGNMENT> | <EXPR> | ""
<FOR_INCREMENT> ::= <ASSIGNMENT> | <EXPR> | ""

/* function declaration */
<FN_DECL> ::= "fx" <IDENT> <PARAMS> "==>" <RETURN_TYPE> <STMT_BLOCK>

/* struct declaration */
<STRUCT_DECL> ::= <STRUCT_TYPE> <VAR_DECL_STMT_BLOCK>
<VAR_DECL_STMT_BLOCK> ::= "{" <VAR_DECL_STMTS> "}"
<VAR_DECL_STMTS> ::= <VAR_DECL_STMT> ";" | <VAR_DECL_STMTS> <VAR_DECL_STMT> ";"

/* variable declaration */
<VAR_DECL> ::= <TYPE> <IDENT>

/* variable declaration with initialization */
<VAR_DECL_AND_INIT> ::= <TYPE> <IDENT> "=" <EXPR>

/* assignment */
<ASSIGNMENT> ::= <LVALUE> <OP_ASSIGN> <EXPR>

/* lvalues */
<LVALUE> ::= <VAR_LVALUE> | <STRUCT_MEMBER_LVALUE> | <POINTER_DEREF_LVALUE> | <LIST_ACCESS_LVALUE>

<VAR_LVALUE> ::= <IDENT>
<STRUCT_MEMBER_LVALUE> ::= <STRUCT_MEMBER> | <STRUCT_MEMBER_LVALUE> <OP_ACCESS_MEMBER> <EXPR>
<STRUCT_MEMBER> ::= <EXPR> <OP_ACCESS_MEMBER> <EXPR>
<POINTER_DEREF_LVALUE> ::= "*" <EXPR>
<LIST_ACCESS_LVALUE> ::= <EXPR> "[" <EXPR> "]"

/* expression */
<LIST_EXPR> ::= "[" <EXPR_SEQ> "]"
<EXPR_SEQ> ::= <EXPR> | <EXPR_SEQ> "," <EXPR>
<EXPR> ::= <OR>
<OR> ::= <AND> | <OR> <OP_OR> <AND>
<AND> ::= <CMP_EQ_NEQ> | <AND> <OP_AND> <CMP_EQ_NEQ>
<CMP_EQ_NEQ> ::= <CMP_GT_LT> | <CMP_EQ_NEQ> <OP_CMP_EQ_NEQ> <CMP_GT_LT>
<CMP_GT_LT> ::= <SUM_SUB> | <CMP_GT_LT> <OP_CMP_GT_LT> <SUM_SUB>
<SUM_SUB> ::= <MUL_DIV_MOD> | <SUM_SUB> <OP_SUM_SUB> <MUL_DIV_MOD>
<MUL_DIV_MOD> ::= <UNARY> | <MUL_DIV_MOD> <OP_MUL_DIV_MOD> <UNARY>
<UNARY> ::= <PRIMARY> | <OP_UNARY> <UNARY>
<PRIMARY> ::= <BASE_TYPE_LIT> | <NULL_LIT> | <VAR> | <FN_CALL> | <LIST_EXPR> | "(" <EXPR> ")"

/* function call */
<FN_CALL> ::= <IDENT> <ARGS>

/* arguments */
<ARGS> ::= "(" ")" | "(" <ARGS_SEQ> ")"
<ARGS_SEQ> ::= <ARG> | <ARGS_SEQ> "," <ARG>
<ARG> ::= <EXPR>

/* parameters */
<PARAMS> ::= "(" ")" | "(" <PARAMS_SEQ> ")"
<PARAMS_SEQ> ::= <PARAM> | <PARAMS_SEQ> "," <PARAM>
<PARAM> ::= <TYPE> <IDENT>

/* variables */
<VAR> ::= <IDENT>

/* identifiers */
<IDENT> ::= <IDENT_HEAD_SYM> | <IDENT> <IDENT_TAIL_SYM>

/* return type */
<RETURN_TYPE> ::= <TYPE> | <VOID_LIT>

/* types */
<TYPE> ::= <BASE_TYPE> | <POINTER_TYPE> | <LIST_TYPE> | <STRUCT_TYPE>
<POINTER_TYPE> ::= <TYPE> "*"
<LIST_TYPE> ::= <TYPE> "[" <INT_LIT> "]" |  <TYPE> "[" "]"
<STRUCT_TYPE> ::= "struct" <IDENT>
<BASE_TYPE_LIT> ::= <INT_LIT> | <FLOAT_LIT> | <BOOL_LIT> | <CHAR_LIT> | <STRING_LIT>
<BASE_TYPE> ::= "int" | "float" | "bool" | "char" | "string"
<NULL_LIT> ::= "NULL"
<VOID_LIT> ::= "void"
<STRING_LIT> ::= "\"" "\"" | "\"" <ANY> "\""
<CHAR_LIT> ::= "'" <ANY_SYM> "'"
<BOOL_LIT> ::= "True" | "False"
<FLOAT_LIT> ::= <FLOAT_WO_E> | <FLOAT_WO_E> "e" <SIGNABLE_DIGITS> | <SIGNABLE_DIGITS> "e" <SIGNABLE_DIGITS>
<FLOAT_WO_E> ::= "." <DIGITS> | <SIGNABLE_DIGITS> "." |  <SIGNABLE_DIGITS> "." <DIGITS>
<INT_LIT> ::= <SIGNABLE_DIGITS>

/* access member operators */
<OP_ACCESS_MEMBER> ::= "." | "->"

/* unary operators */
<OP_UNARY> ::= "!" | "++" | "--" | "*" | "&"

/* arithmetic operators */
<OP_MUL_DIV_MOD> ::= "*" | "/" | "%"

/* arithmetic operators */
<OP_SUM_SUB> ::= "+" | "-"

/* cmp operators */
<OP_CMP_GT_LT> ::= ">" | "<" | ">=" |"<="

/* cmp operators */
<OP_CMP_EQ_NEQ> ::= "==" | "!="

/* logical operators */
<OP_AND> ::= "AND"

/* logical operators */
<OP_OR> ::= "OR"

/* assign operators */
<OP_ASSIGN> ::= "=" | "+=" | "-=" | "*=" | "/=" | "%="

/* comments */
<COMMENT> ::= <COMMENT_LINE> | <COMMENT_BLOCK>
<COMMENT_LINE> ::= "#" <ANY_WO_ESCAPES> <NEWLINE> 
<COMMENT_BLOCK> ::= "###" <ANY_WO_ESCAPES> "###"

/* molecules */
<ANY> ::= <ANY_SYM> | <ANY> <ANY_SYM>
<ANY_WO_ESCAPES> ::= <ANY_SYM_WO_ESCAPES> | <ANY_WO_ESCAPES> <ANY_SYM_WO_ESCAPES>

<SIGNABLE_DIGITS> ::= <SIGN> <DIGITS> | <DIGITS>
<DIGITS> ::= <DIGIT> | <DIGITS> <DIGIT>

/* atoms */
<IDENT_TAIL_SYM> ::= <DIGIT> | <IDENT_HEAD_SYM>
<IDENT_HEAD_SYM> ::= <LETTER> | <UNDERSCORE>

<ANY_SYM> ::= <ANY_SYM_WO_ESCAPES> | <ESCAPED_SYM>
<ANY_SYM_WO_ESCAPES> ::= <DIGIT> | <LETTER> | <SPECIAL>

<ESCAPED_SYM> ::= "\\" <SYM_TO_BE_ESCAPED>
<SYM_TO_BE_ESCAPED> ::= "n" | "r" | "t" | "\\" | "\""

<NEWLINE> ::= "\\n" 
<SIGN> ::= "+" | "-"
<UNDERSCORE> ::= "_"

<SPECIAL> ::= "!" | "#" | "$" | "%" | "&" | "'" | "(" | ")" | "*" | "," | "." | "/" | ":" | ";" | "<" | "=" | ">" | "?" | "@" | "[" | "]" | "^" | "`" | "{" | "}" | "|" | "~" | " " | "_" | "+" | "-"
<LETTER> ::= <LCASE_LETTER> | <UCASE_LETTER>
<UCASE_LETTER> ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z"
<LCASE_LETTER> ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z"
<DIGIT> ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
