digraph finite_state_machine {
    rankdir = LR;
    size = "8,5"
    node [shape = doublecircle]; IDENT, KW_BOOL, KW_BREAK, KW_FN_RET_ARROW, OP_DOT_ACCESS_MEMBER, ERROR, LIT_INT, LIT_FLOAT, LIT_CHAR, LIT_STR, OP_GE, OP_G, OP_LE, OP_L, OP_IS_EQ, OP_ASSIGN_EQ, OP_IS_NEQ, OP_NOT, OP_INCR, OP_ASSIGN_SUM, OP_SUM, OP_DECR, OP_ASSIGN_SUB, OP_SUB, OP_ASSIGN_MUL, OP_MUL, OP_ASSIGN_DIV, OP_DIV, OP_ASSIGN_MOD, OP_MOD, OP_PAREN_O, OP_PAREN_C, OP_BRACE_O, OP_BRACE_C, OP_BRACKET_O, OP_BRACKET_C, OP_SEMICOLON, OP_COMMA, OP_PTR_ADDR;
    node [shape = circle];

    // KW START
    _START_ -> _KW_BOOL_BREAK_ [label = "b"];

    // KW SPECIFYING
    _KW_BOOL_BREAK_ -> _KW_BOOL_BO_ [label = "o"];
    _KW_BOOL_BREAK_ -> _KW_BREAK_BR_ [label = "r"];
    _KW_BOOL_BREAK_ -> _IDENT_ [label = "(?=[^or])[_a-zA-Z0-9]"];
    _KW_BOOL_BREAK_ -> IDENT [label = "ELSE"];

    // KW BOOL
    _KW_BOOL_BO_ -> _KW_BOOL_BOO_ [label = "o"];
    _KW_BOOL_BO_ -> _IDENT_ [label = "(?=[^o])[_a-zA-Z0-9]"];
    _KW_BOOL_BO_ -> IDENT [label = "ELSE"];

    _KW_BOOL_BOO_ -> _KW_BOOL_BOOL_ [label = "l"];
    _KW_BOOL_BOO_ -> _IDENT_ [label = "(?=[^l])[_a-zA-Z0-9]"];
    _KW_BOOL_BOO_ -> IDENT [label = "ELSE"];

    _KW_BOOL_BOOL_ -> _IDENT_ [label = "[_a-zA-Z0-9]"];
    _KW_BOOL_BOOL_ -> KW_BOOL [label = "ELSE"];


    // KW BREAK
    _KW_BREAK_BR_ -> _KW_BREAK_BRE_ [label = "e"];
    _KW_BREAK_BR_ -> _IDENT_ [label = "(?=[^e])[_a-zA-Z0-9]"];
    _KW_BREAK_BR_ -> IDENT [label = "ELSE"];

    _KW_BREAK_BRE_ -> _KW_BREAK_BREA_ [label = "a"];
    _KW_BREAK_BRE_ -> _IDENT_ [label = "(?=[^a])[_a-zA-Z0-9]"];
    _KW_BREAK_BRE_ -> IDENT [label = "ELSE"];

    _KW_BREAK_BREA_ -> _KW_BREAK_BREAK_ [label = "k"];
    _KW_BREAK_BREA_ -> _IDENT_ [label = "(?=[^k])[_a-zA-Z0-9]"];
    _KW_BREAK_BREA_ -> IDENT [label = "ELSE"];

    _KW_BREAK_BREAK_ -> _IDENT_ [label = "[_a-zA-Z0-9]"];
    _KW_BREAK_BREAK_ -> KW_BREAK [label = "ELSE"];

    // REMAINING KEYWORDS (to be implemented)

    //_START_ -> _KW_CHAR_CONTINUE_ [label = "c"];
    //_START_ -> _KW_ELIF_ELSE_ [label = "e"];
    //_START_ -> _KW_FN_FOR_FLOAT_ [label = "f"];
    //_START_ -> _KW_IN_IF_INT_ [label = "i"];
    //_START_ -> _KW_FN_OUT_ [label = "o"];
    //_START_ -> _KW_RETURN_ [label = "r"];
    //_START_ -> _KW_STRUCT_ [label = "s"];
    //_START_ -> _KW_VOID_ [label = "v"];
    //_START_ -> _KW_AND_ [label = "A"];
    //_START_ -> _KW_FALSE_ [label = "F"];
    //_START_ -> _KW_NULL_ [label = "N"];
    //_START_ -> _KW_OR_ [label = "O"];
    //_START_ -> _KW_TRUE_ [label = "T"];

    _START_ -> _IDENT_ [label = "(?=[^bcefiosvAFNOT])[_a-zA-Z]"];
    _IDENT_ -> _IDENT_ [label = "[_a-zA-Z0-9]"];
    _IDENT_ -> _STRUCT_MEMBER_IDENT_ [label = "\\."];
    _IDENT_ -> IDENT [label = "ELSE"];

    _STRUCT_MEMBER_IDENT_ -> OP_DOT_ACCESS_MEMBER [label = "[_a-zA-Z]"];
    _STRUCT_MEMBER_IDENT_ -> ERROR [ label = "ELSE" ];

    _START_ -> _LIT_INT_ [ label = "[0-9]"];
    _LIT_INT_ -> _LIT_INT_ [label = "[0-9]"];
    _LIT_INT_ -> _LIT_FLOAT_ [label = "\\."];
    _LIT_INT_ -> ERROR [label = "[_a-zA-Z]" ];
    _LIT_INT_ -> LIT_INT [label = "ELSE" ];

    _START_ -> _LIT_FLOAT_ [label = "\\."];
    _LIT_FLOAT_ -> _LIT_FLOAT_ [label = "[0-9]"];
    _LIT_FLOAT_ ->_LIT_FLOAT_E_[label = "e"];
    _LIT_FLOAT_ -> LIT_FLOAT [label = "ELSE"];

   _LIT_FLOAT_E_-> _LIT_FLOAT_W_E_ [label = "[0-9]"];
   _LIT_FLOAT_E_-> _LIT_FLOAT_E_SIGN_ [label = "[\\+-]"];
   _LIT_FLOAT_E_-> ERROR [label = "ELSE"];

    _LIT_FLOAT_E_SIGN_ -> _LIT_FLOAT_W_E_ [label = "[0-9]"];
    _LIT_FLOAT_E_SIGN_ -> ERROR [label = "ELSE"];

    _LIT_FLOAT_W_E_ -> _LIT_FLOAT_W_E_ [label = "[0-9]"];
    _LIT_FLOAT_W_E_ -> LIT_FLOAT [label = "ELSE"];

    _START_ -> _LIT_CHAR_ [label = "'"];
    _LIT_CHAR_ -> LIT_CHAR [label = "'"];
    _LIT_CHAR_ -> _LIT_CHAR_ESCAPE_ [label = "\\\\"];
    _LIT_CHAR_ -> ERROR [label = "[\\n\\r\\t]"];
    _LIT_CHAR_ ->_LIT_CHAR_ADDED_[ label = "ELSE"];

    _LIT_CHAR_ESCAPE_ -> _LIT_CHAR_ADDED_ [label = "['\\\\nrt]"];
    _LIT_CHAR_ESCAPE_ -> ERROR [label = "ELSE"];

    _LIT_CHAR_ADDED_ -> LIT_CHAR [label = "'"];
    _LIT_CHAR_ADDED_ -> ERROR [label = "ELSE"];

    _START_ -> _LIT_STR_ [label = "\"" ];
    _LIT_STR_ -> LIT_STR [ label = "\""];
    _LIT_STR_ -> _LIT_STR_ESCAPE_ [label = "\\\\"];
    _LIT_STR_ -> _LIT_STR_ [label = "ELSE"];

    _LIT_STR_ESCAPE_ -> _LIT_STR_ [label = "[\"\\\\nrt]"];
    _LIT_STR_ESCAPE_ -> ERROR [label = "ELSE"];

    _START_ -> _OP_G_ [label = ">"];
    _OP_G_ -> OP_GE [label = "="];
    _OP_G_ -> OP_G [label = "ELSE"];

    _START_ -> _OP_L_ [label = "<"];
    _OP_L_ -> OP_LE [label = "="];
    _OP_L_ -> OP_L [label = "ELSE"];

    _START_ -> _OP_ASSIGN_EQ_ [label = "="];
    _OP_ASSIGN_EQ_ -> _OP_IS_EQ_ [label = "="];
    _OP_ASSIGN_EQ_ -> OP_ASSIGN_EQ [label = "ELSE"];

    _OP_IS_EQ_ -> KW_FN_RET_ARROW [label = ">"];
    _OP_IS_EQ_ -> OP_IS_EQ [label = "ELSE"];

    _START_ -> _OP_NOT_ [label = "!"];
    _OP_NOT_ -> OP_IS_NEQ [label = "="];
    _OP_NOT_ -> OP_NOT [label = "ELSE"];

    _START_ -> _OP_SUM_ [label = "\\+"];
    _OP_SUM_ -> OP_INCR [label = "\\+"];
    _OP_SUM_ -> OP_ASSIGN_SUM [label = "="];
    _OP_SUM_ -> _LIT_INT_ [label = "[0-9]"];
    _OP_SUM_ -> OP_SUM [label = "ELSE"];

    _START_ -> _OP_SUB_ [label = "_"];
    _OP_SUB_ -> OP_DECR [label = "-"];
    _OP_SUB_ -> OP_ASSIGN_SUB [label = "="];
    _OP_SUB_ -> _LIT_INT_ [ label = "[0-9]"];
    _OP_SUB_ -> OP_SUB [ label = "ELSE"];

    _START_ -> _OP_MUL_ [label = "\\*"];
    _OP_MUL_ -> OP_ASSIGN_MUL [label = "="];
    _OP_MUL_ -> OP_MUL [label = "ELSE"];

    _START_ -> _OP_DIV_ [label = "\\/"];
    _OP_DIV_ -> OP_ASSIGN_DIV [label = "="];
    _OP_DIV_ -> OP_DIV [label = "ELSE"];

    _START_ -> _OP_MOD_ [label = "%" ];
    _OP_MOD_ -> OP_ASSIGN_MOD [label = "="];
    _OP_MOD_ -> OP_MOD [label = "ELSE"];

    _START_ -> OP_PAREN_O [label = "\\("];
    _START_ -> OP_PAREN_C [label = "\\)"];
    _START_ -> OP_BRACE_O [label = "{"];
    _START_ -> OP_BRACE_C [label = "}"];
    _START_ -> OP_BRACKET_O [label = "\\["];
    _START_ -> OP_BRACKET_C [label = "\\]"];
    _START_ -> OP_SEMICOLON [label = ";"];
    _START_ -> OP_COMMA [label = ","];
    _START_ -> OP_PTR_ADDR [label = "&"];

    _START_ -> _INCLUDE_ [label = "@"];
    _INCLUDE_ -> _START_ [label = "\\n"];
    _INCLUDE_ -> _INCLUDE_ [label = "ELSE"];

    _START_ -> _START_ [label = "[\\n\\r\\t]"];

    // COMMENTS
    _START_ -> _COMMENT_START_ [label = "#"];
    _COMMENT_START_ -> _START_ [label = "\\n"];
    _COMMENT_START_ -> _COMMENT_SL_PLUS_2_ [label = "#" ];
    _COMMENT_START_ -> _COMMENT_SL_ [label = "ELSE"];

    _COMMENT_SL_ -> _START_ [label = "\\n"];
    _COMMENT_SL_ -> _COMMENT_SL_ [label = "ELSE"];

    _COMMENT_SL_PLUS_2_ -> _START_ [label = "\\n"];
    _COMMENT_SL_PLUS_2_ -> _COMMENT_ML_ [label = "#"];
    _COMMENT_SL_PLUS_2_ -> _COMMENT_SL_ [label = "ELSE"];

    _COMMENT_ML_ -> _COMMENT_ML_MINUS_1_ [label = "#"];
    _COMMENT_ML_ -> _COMMENT_ML_ [label = "ELSE"];

    _COMMENT_ML_MINUS_1_ -> _COMMENT_ML_MINUS_2_ [label = "#"];
    _COMMENT_ML_MINUS_1_ -> _COMMENT_ML_ [label = "ELSE"];

    _COMMENT_ML_MINUS_2_ -> _START_ [label = "#"];
    _COMMENT_ML_MINUS_2_ -> _COMMENT_ML_ [label = "ELSE"];

    _START_ -> ERROR [ label = "ELSE" ];
}
